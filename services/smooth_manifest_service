package services

import (
	"encoding/json"

	"github.com/bitmovin/bitmovin-go/bitmovin"
	"github.com/bitmovin/bitmovin-go/models"
)

type smoothManifestService struct {
	RestService *RestService
}

const (
	smoothManifestEndpoint string = "encoding/manifests/smooth"
)

func NewSmoothManifestService(bitmovin *bitmovin.Bitmovin) *smoothManifestService {
	r := NewRestService(bitmovin)

	return &smoothManifestService{RestService: r}
}

func (s *HLSManifestService) Create(a *models.smoothManifest) (*models.smoothManifestResponse, error) {
	b, err := json.Marshal(*a)
	if err != nil {
		return nil, err
	}

	o, err := s.RestService.Create(smoothManifestEndpoint, b)
	if err != nil {
		return nil, err
	}
	var r models.smoothManifestResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *smoothManifestService) Retrieve(id string) (*models.smoothManifestResponse, error) {
	path := smoothManifestEndpoint + "/" + id
	o, err := s.RestService.Retrieve(path)
	if err != nil {
		return nil, err
	}
	var r models.smoothManifestResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *smoothManifestService) Delete(id string) (*models.smoothManifestResponse, error) {
	path := smoothManifestEndpoint + "/" + id
	o, err := s.RestService.Delete(path)
	if err != nil {
		return nil, err
	}
	var r models.smoothManifestResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *smoothManifestService) AddMediaInfo(manifestID string, a *models.MediaInfo) (*models.MediaInfoResponse, error) {
	b, err := json.Marshal(*a)
	if err != nil {
		return nil, err
	}
	path := smoothManifestEndpoint + "/" + manifestID + "/media"
	o, err := s.RestService.Create(path, b)
	if err != nil {
		return nil, err
	}
	var r models.MediaInfoResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *smoothManifestService) AddStreamInfo(manifestID string, a *models.StreamInfo) (*models.StreamInfoResponse, error) {
	b, err := json.Marshal(*a)
	if err != nil {
		return nil, err
	}
	path := smoothManifestEndpoint + "/" + manifestID + "/streams"
	o, err := s.RestService.Create(path, b)
	if err != nil {
		return nil, err
	}
	var r models.StreamInfoResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *smoothManifestService) Start(manifestID string) (*models.StartStopResponse, error) {
	path := smoothManifestEndpoint + "/" + manifestID + "/start"
	o, err := s.RestService.Create(path, nil)
	if err != nil {
		return nil, err
	}
	var r models.StartStopResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *smoothManifestService) RetrieveStatus(manifestID string) (*models.StatusResponse, error) {
	path := smoothManifestEndpoint + "/" + manifestID + "/status"
	o, err := s.RestService.Retrieve(path)
	if err != nil {
		return nil, err
	}
	var r models.StatusResponse
	err = json.Unmarshal(o, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}
